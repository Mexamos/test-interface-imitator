{"version":3,"file":"get-event-listeners.min.js","sources":["../src/index.js"],"sourcesContent":["const eventsCache = []\n\n// backup old handlers\nconst { addEventListener: _addEventListener } = Element.prototype\nconst { removeEventListener: _removeEventListener } = Element.prototype\n\n// new handler for adding listeners\nfunction _addListener(type, handler, useCapture) {\n  if (_eventExists(this, type, handler, useCapture) === false) {\n    eventsCache.push({\n      target: this,\n      type: type,\n      handler: handler,\n      useCapture: useCapture\n    })\n  }\n\n  _addEventListener.call(this, type, handler, useCapture)\n}\n\n// check if event is in cache\nfunction _eventExists(target, type, handler, useCapture) {\n  var e, len = eventsCache.length, i\n  for (i = 0; i < len; i++) {\n    e = eventsCache[i]\n\n    if (e.target === target && e.type === type && e.handler === handler && e.useCapture === useCapture) {\n      return i\n    }\n  }\n\n  return false\n}\n\n// new handler for removing listeners\nfunction _removeListener(type, handler, useCapture) {\n\n  var pos = _eventExists(this, type, handler, useCapture)\n  if (pos !== false && pos < eventsCache.length) {\n    eventsCache.splice(pos, 1)\n  }\n\n  _removeEventListener.call(this, type, handler, useCapture)\n}\n\n\n// switch to new handlers\nElement.prototype.addEventListener = _addListener\nElement.prototype.removeEventListener = _removeListener\n// get current element listeners\nElement.prototype.getEventListeners = function () {\n  var listeners = [], len = eventsCache.length, i\n  for (i = 0; i < len; i++) {\n    if (eventsCache[i].target === this) {\n      listeners.push(eventsCache[i])\n    }\n  }\n  return listeners\n}\n\ndocument.__proto__.addEventListener = _addListener\ndocument.__proto__.removeEventListener = _removeListener\ndocument.__proto__.getEventListeners = Element.prototype.getEventListeners\n\n// get all registered listeners\nexport function getAllEventListeners() {\n  return eventsCache\n}\n\n// get listeners of an element\nexport function getEventListeners(el) {\n  return el.getEventListeners.bind(el)\n}\n\nwindow.getAllEventListeners = getAllEventListeners\nwindow.getEventListeners = getEventListeners\n"],"names":["eventsCache","_addEventListener","Element","prototype","addEventListener","_removeEventListener","removeEventListener","_addListener","type","handler","useCapture","_eventExists","this","push","target","call","e","i","len","length","_removeListener","pos","splice","getAllEventListeners","getEventListeners","el","bind","listeners","document","__proto__","window"],"mappings":"oMAAA,IAAMA,EAAc,GAGMC,EAAsBC,QAAQC,UAAhDC,iBACqBC,EAAyBH,QAAQC,UAAtDG,oBAGR,SAASC,EAAaC,EAAMC,EAASC,IACmB,IAAlDC,EAAaC,KAAMJ,EAAMC,EAASC,IACpCV,EAAYa,KAAK,CACfC,OAAQF,KACRJ,KAAMA,EACNC,QAASA,EACTC,WAAYA,IAIhBT,EAAkBc,KAAKH,KAAMJ,EAAMC,EAASC,GAI9C,SAASC,EAAaG,EAAQN,EAAMC,EAASC,OACvCM,EAA6BC,EAA1BC,EAAMlB,EAAYmB,WACpBF,EAAI,EAAGA,EAAIC,EAAKD,QACnBD,EAAIhB,EAAYiB,IAEVH,SAAWA,GAAUE,EAAER,OAASA,GAAQQ,EAAEP,UAAYA,GAAWO,EAAEN,aAAeA,SAC/EO,SAIJ,EAIT,SAASG,EAAgBZ,EAAMC,EAASC,OAElCW,EAAMV,EAAaC,KAAMJ,EAAMC,EAASC,IAChC,IAARW,GAAiBA,EAAMrB,EAAYmB,QACrCnB,EAAYsB,OAAOD,EAAK,GAG1BhB,EAAqBU,KAAKH,KAAMJ,EAAMC,EAASC,GAuB1C,SAASa,WACPvB,EAIF,SAASwB,EAAkBC,UACzBA,EAAGD,kBAAkBE,KAAKD,GAxBnCvB,QAAQC,UAAUC,iBAAmBG,EACrCL,QAAQC,UAAUG,oBAAsBc,EAExClB,QAAQC,UAAUqB,kBAAoB,eACUP,EAA1CU,EAAY,GAAIT,EAAMlB,EAAYmB,WACjCF,EAAI,EAAGA,EAAIC,EAAKD,IACfjB,EAAYiB,GAAGH,SAAWF,MAC5Be,EAAUd,KAAKb,EAAYiB,WAGxBU,GAGTC,SAASC,UAAUzB,iBAAmBG,EACtCqB,SAASC,UAAUvB,oBAAsBc,EACzCQ,SAASC,UAAUL,kBAAoBtB,QAAQC,UAAUqB,kBAYzDM,OAAOP,qBAAuBA,EAC9BO,OAAON,kBAAoBA"}